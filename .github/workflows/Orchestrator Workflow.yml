name: Orchestrator Workflow

on:
  workflow_dispatch: # Allow manual triggering of the orchestrator workflow

permissions:
  actions: write
  contents: read

jobs:
  project-one:
    name: Run Project-One Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Project-One Workflow
        id: trigger-project-one
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            console.log('Triggering Project-One Workflow...');
            await github.rest.actions.createWorkflowDispatch({
              owner: 'kvs-org',
              repo: 'project-one',
              workflow_id: 'maven-package.yml',
              ref: 'main'
            });
            console.log('Project-One Workflow triggered successfully.');

      - name: Wait for Project-One Workflow to Complete
        id: wait-for-project-one
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const owner = 'kvs-org';
            const repo = 'project-one';
            const workflow_id = 'maven-package.yml';
            const branch = 'main';
            let status = 'in_progress';

            console.log(`Polling for Project-One Workflow completion...`);
            while (status === 'in_progress' || status === 'queued') {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                branch
              });

              console.log(`Found ${runs.data.workflow_runs.length} workflow runs for branch '${branch}'.`);
              if (runs.data.workflow_runs.length > 0) {
                const latestRun = runs.data.workflow_runs.find(run => run.head_branch === branch);
                if (latestRun) {
                  console.log(`Latest run ID: ${latestRun.id}, Status: ${latestRun.status}, Conclusion: ${latestRun.conclusion}`);
                  status = latestRun.status;
                  if (status === 'completed') {
                    const conclusion = latestRun.conclusion;
                    if (conclusion !== 'success') {
                      throw new Error(`Project-One Workflow failed with conclusion: ${conclusion}`);
                    }
                    console.log('Project-One Workflow completed successfully.');
                    break;
                  }
                } else {
                  console.log('No matching workflow run found for the specified branch.');
                }
              } else {
                console.log('No workflow runs found.');
              }

              console.log(`Workflow status: ${status}. Waiting for 30 seconds before polling again...`);
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait for 30 seconds
            }

  project-two:
    name: Run Project-Two Workflow
    runs-on: ubuntu-latest
    needs: [project-one] # Wait for project-one to complete
    steps:
      - name: Trigger Project-Two Workflow
        id: trigger-project-two
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            console.log('Triggering Project-Two Workflow...');
            await github.rest.actions.createWorkflowDispatch({
              owner: 'kvs-org',
              repo: 'project-two',
              workflow_id: 'maven-package.yml',
              ref: 'main'
            });
            console.log('Project-Two Workflow triggered successfully.');

      - name: Wait for Project-Two Workflow to Complete
        id: wait-for-project-two
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const owner = 'kvs-org';
            const repo = 'project-two';
            const workflow_id = 'maven-package.yml';
            const branch = 'main';
            let status = 'in_progress';

            console.log(`Polling for Project-Two Workflow completion...`);
            while (status === 'in_progress' || status === 'queued') {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                branch
              });

              console.log(`Found ${runs.data.workflow_runs.length} workflow runs for branch '${branch}'.`);
              if (runs.data.workflow_runs.length > 0) {
                const latestRun = runs.data.workflow_runs.find(run => run.head_branch === branch);
                if (latestRun) {
                  console.log(`Latest run ID: ${latestRun.id}, Status: ${latestRun.status}, Conclusion: ${latestRun.conclusion}`);
                  status = latestRun.status;
                  if (status === 'completed') {
                    const conclusion = latestRun.conclusion;
                    if (conclusion !== 'success') {
                      throw new Error(`Project-Two Workflow failed with conclusion: ${conclusion}`);
                    }
                    console.log('Project-Two Workflow completed successfully.');
                    break;
                  }
                } else {
                  console.log('No matching workflow run found for the specified branch.');
                }
              } else {
                console.log('No workflow runs found.');
              }

              console.log(`Workflow status: ${status}. Waiting for 30 seconds before polling again...`);
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait for 30 seconds
            }

  project-three:
    name: Run Project-Three Workflow
    runs-on: ubuntu-latest
    needs: [project-two] # Wait for project-two to complete
    steps:
      - name: Trigger Project-Three Workflow
        id: trigger-project-three
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'kvs-org',
              repo: 'project-three',
              workflow_id: 'maven-package.yml',
              ref: 'main'
            });

      - name: Wait for Project-Three Workflow to Complete
        id: wait-for-project-three
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const owner = 'kvs-org';
            const repo = 'project-three';
            const workflow_id = 'maven-package.yml';
            const branch = 'main';
            let status = 'in_progress';

            while (status === 'in_progress' || status === 'queued') {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                branch
              });

              if (runs.data.workflow_runs.length > 0) {
                const latestRun = runs.data.workflow_runs.find(run => run.head_branch === branch);
                if (latestRun) {
                  status = latestRun.status;
                  if (status === 'completed') {
                    const conclusion = latestRun.conclusion;
                    if (conclusion !== 'success') {
                      throw new Error(`Workflow failed with conclusion: ${conclusion}`);
                    }
                    break;
                  }
                }
              }

              console.log(`Workflow status: ${status}. Waiting for 30 seconds...`);
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait for 30 seconds
            }

  project-four:
    name: Run Project-Four Workflow
    runs-on: ubuntu-latest
    needs: [project-three] # Wait for project-three to complete
    steps:
      - name: Trigger Project-Four Workflow
        id: trigger-project-four
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'kvs-org',
              repo: 'project-four',
              workflow_id: 'maven-package.yml',
              ref: 'main'
            });

      - name: Wait for Project-Four Workflow to Complete
        id: wait-for-project-four
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const owner = 'kvs-org';
            const repo = 'project-four';
            const workflow_id = 'maven-package.yml';
            const branch = 'main';
            let status = 'in_progress';

            while (status === 'in_progress' || status === 'queued') {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                branch
              });

              if (runs.data.workflow_runs.length > 0) {
                const latestRun = runs.data.workflow_runs.find(run => run.head_branch === branch);
                if (latestRun) {
                  status = latestRun.status;
                  if (status === 'completed') {
                    const conclusion = latestRun.conclusion;
                    if (conclusion !== 'success') {
                      throw new Error(`Workflow failed with conclusion: ${conclusion}`);
                    }
                    break;
                  }
                }
              }

              console.log(`Workflow status: ${status}. Waiting for 30 seconds...`);
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait for 30 seconds
            }
