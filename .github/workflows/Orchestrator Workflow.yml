name: Orchestrator Workflow

on:
  workflow_dispatch: # Allow manual triggering of the orchestrator workflow

permissions:
  actions: write
  contents: read

jobs:
  project-one:
    name: Run Project-One Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Project-One Workflow
        id: trigger-project-one
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            console.log('Triggering Project-One Workflow...');
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: 'kvs-org',
              repo: 'project-one',
              workflow_id: 'maven-package.yml',
              ref: 'main'
            });
            console.log('Project-One Workflow triggered successfully.');
            console.log('Waiting for the workflow run to appear...');
            let runId;
            while (!runId) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: 'kvs-org',
                repo: 'project-one',
                workflow_id: 'maven-package.yml',
                branch: 'main',
                status: 'in_progress'
              });
              if (runs.data.workflow_runs.length > 0) {
                runId = runs.data.workflow_runs[0].id;
                console.log(`Found workflow run with ID: ${runId}`);
              } else {
                console.log('Workflow run not yet available. Retrying in 10 seconds...');
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait for 10 seconds
              }
            }
            core.setOutput('runId', runId); 

      - name: Wait for Project-One Workflow to Complete
        id: wait-for-project-one
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const owner = 'kvs-org';
            const repo = 'project-one';
            const runId = ${{ steps.trigger-project-one.outputs.runId }}; # Access the output from the previous step
            let status = 'in_progress';

            console.log(`Polling for Project-One Workflow completion (Run ID: ${runId})...`);
            while (status === 'in_progress' || status === 'queued') {
              const run = await github.rest.actions.getWorkflowRun({
                owner,
                repo,
                run_id: runId
              });

              status = run.data.status;
              console.log(`Workflow Run ID: ${runId}, Status: ${status}, Conclusion: ${run.data.conclusion}`);
              if (status === 'completed') {
                if (run.data.conclusion !== 'success') {
                  throw new Error(`Project-One Workflow failed with conclusion: ${run.data.conclusion}`);
                }
                console.log('Project-One Workflow completed successfully.');
                break;
              }

              console.log('Workflow still in progress. Waiting for 30 seconds...');
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait for 30 seconds
            }

  project-two:
    name: Run Project-Two Workflow
    runs-on: ubuntu-latest
    needs: [project-one] # Wait for project-one to complete
    steps:
      - name: Trigger Project-Two Workflow
        id: trigger-project-two
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            console.log('Triggering Project-Two Workflow...');
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: 'kvs-org',
              repo: 'project-two',
              workflow_id: 'maven-package.yml',
              ref: 'main'
            });
            console.log('Project-Two Workflow triggered successfully.');
            console.log('Waiting for the workflow run to appear...');
            let runId;
            while (!runId) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: 'kvs-org',
                repo: 'project-two',
                workflow_id: 'maven-package.yml',
                branch: 'main',
                status: 'in_progress'
              });
              if (runs.data.workflow_runs.length > 0) {
                runId = runs.data.workflow_runs[0].id;
                console.log(`Found workflow run with ID: ${runId}`);
              } else {
                console.log('Workflow run not yet available. Retrying in 10 seconds...');
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait for 10 seconds
              }
            }
            core.setOutput('runId', runId);

      - name: Wait for Project-Two Workflow to Complete
        id: wait-for-project-two
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const owner = 'kvs-org';
            const repo = 'project-two';
            const runId = ${{ steps.trigger-project-two.outputs.runId }};
            let status = 'in_progress';

            console.log(`Polling for Project-Two Workflow completion (Run ID: ${runId})...`);
            while (status === 'in_progress' || status === 'queued') {
              const run = await github.rest.actions.getWorkflowRun({
                owner,
                repo,
                run_id: runId
              });

              status = run.data.status;
              console.log(`Workflow Run ID: ${runId}, Status: ${status}, Conclusion: ${run.data.conclusion}`);
              if (status === 'completed') {
                if (run.data.conclusion !== 'success') {
                  throw new Error(`Project-Two Workflow failed with conclusion: ${run.data.conclusion}`);
                }
                console.log('Project-Two Workflow completed successfully.');
                break;
              }

              console.log('Workflow still in progress. Waiting for 30 seconds...');
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait for 30 seconds
            }

  project-three:
    name: Run Project-Three Workflow
    runs-on: ubuntu-latest
    needs: [project-two] # Wait for project-two to complete
    steps:
      - name: Trigger Project-Three Workflow
        id: trigger-project-three
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            console.log('Triggering Project-Three Workflow...');
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: 'kvs-org',
              repo: 'project-three',
              workflow_id: 'maven-package.yml',
              ref: 'main'
            });
            console.log('Project-Three Workflow triggered successfully.');
            console.log('Waiting for the workflow run to appear...');
            let runId;
            while (!runId) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: 'kvs-org',
                repo: 'project-three',
                workflow_id: 'maven-package.yml',
                branch: 'main',
                status: 'in_progress'
              });
              if (runs.data.workflow_runs.length > 0) {
                runId = runs.data.workflow_runs[0].id;
                console.log(`Found workflow run with ID: ${runId}`);
              } else {
                console.log('Workflow run not yet available. Retrying in 10 seconds...');
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait for 10 seconds
              }
            }
            core.setOutput('runId', runId);

      - name: Wait for Project-Three Workflow to Complete
        id: wait-for-project-three
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const owner = 'kvs-org';
            const repo = 'project-three';
            const runId = ${{ steps.trigger-project-three.outputs.runId }};
            let status = 'in_progress';

            console.log(`Polling for Project-Three Workflow completion (Run ID: ${runId})...`);
            while (status === 'in_progress' || status === 'queued') {
              const run = await github.rest.actions.getWorkflowRun({
                owner,
                repo,
                run_id: runId
              });

              status = run.data.status;
              console.log(`Workflow Run ID: ${runId}, Status: ${status}, Conclusion: ${run.data.conclusion}`);
              if (status === 'completed') {
                if (run.data.conclusion !== 'success') {
                  throw new Error(`Project-Three Workflow failed with conclusion: ${run.data.conclusion}`);
                }
                console.log('Project-Three Workflow completed successfully.');
                break;
              }

              console.log('Workflow still in progress. Waiting for 30 seconds...');
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait for 30 seconds
            }

  project-four:
    name: Run Project-Four Workflow
    runs-on: ubuntu-latest
    needs: [project-three] # Wait for project-three to complete
    steps:
      - name: Trigger Project-Four Workflow
        id: trigger-project-four
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            console.log('Triggering Project-Four Workflow...');
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: 'kvs-org',
              repo: 'project-four',
              workflow_id: 'maven-package.yml',
              ref: 'main'
            });
            console.log('Project-Four Workflow triggered successfully.');
            console.log('Waiting for the workflow run to appear...');
            let runId;
            while (!runId) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: 'kvs-org',
                repo: 'project-four',
                workflow_id: 'maven-package.yml',
                branch: 'main',
                status: 'in_progress'
              });
              if (runs.data.workflow_runs.length > 0) {
                runId = runs.data.workflow_runs[0].id;
                console.log(`Found workflow run with ID: ${runId}`);
              } else {
                console.log('Workflow run not yet available. Retrying in 10 seconds...');
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait for 10 seconds
              }
            }
            core.setOutput('runId', runId);

      - name: Wait for Project-Four Workflow to Complete
        id: wait-for-project-four
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.WORKFLOW_PAT }}
          script: |
            const owner = 'kvs-org';
            const repo = 'project-four';
            const runId = ${{ steps.trigger-project-four.outputs.runId }};
            let status = 'in_progress';

            console.log(`Polling for Project-Four Workflow completion (Run ID: ${runId})...`);
            while (status === 'in_progress' || status === 'queued') {
              const run = await github.rest.actions.getWorkflowRun({
                owner,
                repo,
                run_id: runId
              });

              status = run.data.status;
              console.log(`Workflow Run ID: ${runId}, Status: ${status}, Conclusion: ${run.data.conclusion}`);
              if (status === 'completed') {
                if (run.data.conclusion !== 'success') {
                  throw new Error(`Project-Four Workflow failed with conclusion: ${run.data.conclusion}`);
                }
                console.log('Project-Four Workflow completed successfully.');
                break;
              }

              console.log('Workflow still in progress. Waiting for 30 seconds...');
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait for 30 seconds
            }
